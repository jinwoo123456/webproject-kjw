<Server port="8005" shutdown="SHUTDOWN">
     <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
     <!-- 보안 리스너. 자세한 내용은 /docs/config/listeners.html을 참조하십시오.
     <Listener className="org.apache.catalina.security.SecurityListener" />
     -->
     <!-- Tomcat Native를 사용한 OpenSSL 지원 -->
     <Listener className="org.apache.catalina.core.AprLifecycleListener" />
     <!-- Java 22의 FFM API를 사용한 OpenSSL 지원 -->
     <!-- <Listener className="org.apache.catalina.core.OpenSSLLifecycleListener" /> -->
     <!-- 특정 java/javax API 사용으로 인한 메모리 누수를 방지 -->
     <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
     <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
     <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />
   
     <!-- 전역 JNDI 리소스
          자세한 내용은 /docs/jndi-resources-howto.html을 참조하십시오.
     -->
     <GlobalNamingResources>
       <!-- 기존 UserDatabase 리소스 -->
       <Resource name="UserDatabase" auth="Container"
                 type="org.apache.catalina.UserDatabase"
                 description="업데이트 및 저장할 수 있는 사용자 데이터베이스"
                 factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                 pathname="conf/tomcat-users.xml" />
   
       <!-- Oracle 데이터베이스 커넥션 풀 설정 -->
       <Resource name="jdbc/dbcp_myoracle" auth="Container"
                 type="javax.sql.DataSource"
                 driverClassName="oracle.jdbc.OracleDriver"
                 url="jdbc:oracle:thin:@localhost:1521:xe"
                 username="webproject_db"
                 password="1234"/>
     </GlobalNamingResources>
   
     <!-- "Service"는 하나 이상의 "Connector"가 공유하는
          단일 "Container"의 모음입니다. 참고: "Service" 자체는 "Container"가 아니므로,
          이 수준에서 "Valves"와 같은 하위 구성 요소를 정의할 수 없습니다.
          자세한 내용은 /docs/config/service.html을 참조하십시오.
      -->
     <Service name="Catalina">
   
       <!-- 커넥터는 공유 실행자를 사용할 수 있으며, 하나 이상의 명명된 스레드 풀을 정의할 수 있습니다. -->
       <!--
       <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
           maxThreads="150" minSpareThreads="4"/>
       -->
   
       <!-- "Connector"는 요청을 수신하고 응답을 반환하는 엔드포인트를 나타냅니다.
            자세한 내용은 다음을 참조하십시오:
            HTTP Connector: /docs/config/http.html
            AJP Connector: /docs/config/ajp.html
            SSL/TLS가 아닌 HTTP/1.1 커넥터를 포트 8080에 정의합니다.
       -->
       <Connector port="8980" protocol="HTTP/1.1"
                  connectionTimeout="20000"
                  URIEncoding="UTF-8"
                  redirectPort="8443"
                  maxParameterCount="1000"
                  />
       <!-- 공유 스레드 풀을 사용하는 "Connector" -->
       <!--
       <Connector executor="tomcatThreadPool"
                  port="8080" protocol="HTTP/1.1"
                  connectionTimeout="20000"
                  redirectPort="8443"
                  maxParameterCount="1000"
                  />
       -->
       <!-- 포트 8443에서 HTTP/2를 사용하는 SSL/TLS HTTP/1.1 커넥터를 정의합니다.
            이 커넥터는 NIO 구현을 사용합니다. 기본
            SSLImplementation은 APR/네이티브 라이브러리의 존재 여부와
            AprLifecycleListener의 useOpenSSL 속성에 따라 달라집니다.
            선택된 SSLImplementation에 관계없이 JSSE 또는 OpenSSL 스타일 구성을 사용할 수 있습니다.
            아래에는 JSSE 스타일 구성이 사용되었습니다.
       -->
       <!--
       <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
                  maxThreads="150" SSLEnabled="true"
                  maxParameterCount="1000"
                  >
           <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
           <SSLHostConfig>
               <Certificate certificateKeystoreFile="conf/localhost-rsa.jks"
                            type="RSA" />
           </SSLHostConfig>
       </Connector>
       -->
   
       <!-- 포트 8009에서 AJP 1.3 커넥터를 정의합니다. -->
       <!--
       <Connector protocol="AJP/1.3"
                  address="::1"
                  port="8009"
                  redirectPort="8443"
                  maxParameterCount="1000"
                  />
       -->
   
       <!-- 엔진은 Catalina 내에서 모든 요청을 처리하는 진입점을 나타냅니다.
            독립형 Tomcat의 엔진 구현은 요청에 포함된 HTTP 헤더를 분석하고,
            이를 적절한 호스트(가상 호스트)로 전달합니다.
            자세한 내용은 /docs/config/engine.html을 참조하십시오.
       -->
   
       <!-- AJP를 통한 로드 밸런싱을 지원하려면 jvmRoute를 설정해야 합니다. 예:
       <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
       -->
       <Engine name="Catalina" defaultHost="localhost">
   
         <!-- 클러스터링에 대한 자세한 내용은 다음 문서를 참조하십시오:
             /docs/cluster-howto.html (간단한 방법)
             /docs/config/cluster.html (참조 문서) -->
         <!--
         <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
         -->
   
         <!-- LockOutRealm을 사용하여 브루트 포스 공격을 통한 사용자 비밀번호 추측을 방지합니다. -->
         <Realm className="org.apache.catalina.realm.LockOutRealm">
           <!-- 이 Realm은 전역 JNDI 리소스에 구성된 UserDatabase를 사용합니다.
                이 UserDatabase에 대해 수행된 모든 편집은 즉시 Realm에서 사용할 수 있습니다.
           -->
           <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                  resourceName="UserDatabase"/>
         </Realm>
   
         <!-- 프로젝트명 애플리케이션을 위한 Context 설정 -->
         <Host name="localhost" appBase="webapps" unpackWARs="true" autoDeploy="true">
           <Context path="/WebProject_KJW" docBase="C:/project-space/WebProject_KJW/target/WebProject_KJW.war" reloadable="true" />
         </Host>
   
         <!-- SingleSignOn 밸브, 웹 애플리케이션 간 인증 공유
              자세한 내용은 /docs/config/valve.html을 참조하십시오. -->
         <!--
         <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
         -->
   
         <!-- 액세스 로그는 모든 예제를 처리합니다.
              자세한 내용은 /docs/config/valve.html을 참조하십시오.
              참고: 사용된 패턴은 pattern="common"을 사용하는 것과 동일합니다. -->
         <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                prefix="localhost_access_log" suffix=".txt"
                pattern="%h %l %u %t &quot;%r&quot; %s %b" />
   
       </Engine>
     </Service>
   </Server>